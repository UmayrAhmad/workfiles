# This is an affine cipher program written in plain Python that can crack a ciphertext.

# function that calculates GCD for encryption
def CalcGCD(alpha_key):
    sizeofAlphabet = 26
    temp1 = alpha_key
    while sizeofAlphabet != 0:
        x = sizeofAlphabet
        sizeofAlphabet = temp1 % sizeofAlphabet
        temp1 = x
    return temp1

# function that calculates the inverse of a for decryption
def CalcInverseA(alpha_key):
    for i in range(1, alpha_key+1):
        MI = (i*26) + 1
        if MI % alpha_key == 0:
            break
    MI = MI // alpha_key
    return MI

# variables
option = 0
alpha_key = 0
beta_key = 0
gcd = 0
num_message = [0]*100
num_cipher = [0]*100
message = ""

# welcome message and text collection as well as option choice for what to do with text
print("im here to have your cracking needs met")
message = input("Please enter a message or ciphertext:\n")
option = int(input("Type 1 for cracking\n"))

# ensuring a valid choice is made
if option != 1:
    print("Please enter a valid option")
    exit(0)

# converting entered string to Capital letters
message = message.upper().replace(" ", "")
print("Entered value is:", message)

# stores message as ascii
for i in range(len(message)):
    if message[i] != " ":
        num_message[i] = ord(message[i]) - 65
    else:
        num_message[i] = -20

# code for cracking
if option == 1:
    for alpha_key in range(1, 26):
        gcd = CalcGCD(alpha_key)
        if gcd == 1:
            for beta_key in range(1, 27):
                print("\nalpha =", alpha_key, "beta =", beta_key)
                alphaInverse = CalcInverseA(alpha_key)
                print("Plaintext is", end=" ")
                for i in range(len(message)):
                    if num_message[i] != -20:
                        num_cipher[i] = (alphaInverse * (num_message[i] - beta_key)) % 26
                        if num_cipher[i] < 0:
                            num_cipher[i] = num_cipher[i] + 26  # To avoid negative numbers
                        print(chr(num_cipher[i] + 65), end="")
                    else:
                        print(" ", end="")
                print()
            exit(0)

# collection of keys and ensuring they adhere to conditions (both between 1 and 26 & alpha being co-prime with 26)
alpha_key = int(input("Enter Alpha key between 1 and 25\n"))
if alpha_key < 1 or alpha_key > 25:
    print("Alpha should lie in between 1 and 25\nSorry Try again!")
    exit(0)
gcd = CalcGCD(alpha_key)
if gcd != 1:
    print("Alpha must be co-prime with 26: 1,3,5,7,9,11,15,17,19,21,23,25\n Sorry try again!")
    exit(0)
beta_key = int(input("Enter Beta key between 1 and 26\n"))
if beta_key < 0 or beta_key > 26:
    print("Beta should lie between 0 and 25\nSorry Try again!")
    exit(0)
